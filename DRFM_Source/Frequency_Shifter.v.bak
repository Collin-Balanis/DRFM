module Frequency_Shifter (
	input 				M100CLK,
	input 				reset,


	input [15:0]		i,// in offset binary
	input [15:0]		q, // in offset binary
	input 				input_ready,

	input [16:0]		cos, // in offset binary
	input [16:0]		sin, // in offset binary

	output [31:0]		q_shifted_val, // in offset binary
	output [31:0]		i_shited_val  // in offset binary

);
	// NCO STUFF.
		// // 2's comp from NCO
		// reg [15:0] 			sin;
		// reg [15:0]			cos;

		// NCO my_NCO (doppler_shift, M100CLK, reset,sin,cos);
	reg [32:0] 			i_temp;
	reg [32:0]			q_temp;
	reg [32:0]			result_imag_i; //Dpnt care.
	reg [32:0]			result_imag_q; // Dont care.

	Complex_Multipler_altmult_complex_e2o I_Complex_Multiplier	(16'd_0,{~i[15],i[14:0]},{~sin[16],sin[15:0]},{~cos[16],cos[15:0]},result_imag_i,i_temp);
	Complex_Multipler_altmult_complex_e2o Q_Complex_Multiplier	(16'd_0,{~i[15],i[14:0]},{~sin[16],sin[15:0]},{~cos[16],cos[15:0]},result_imag_q,q_temp);


	

	always @ (posedge M100CLK) begin
		// Convert from offset binary to 2's compliment.
		if(input_ready) begin
			if(i_temp[32]) begin
				if (i_temp[31]) i_shited_val <= i_temp[31:0];
				else 			i_shited_val <= 32'h_80000000;
			end
			else begin
				if (i_temp[31]) i_shited_val<=32'h_7FFFFFFF;
				else 			i_shited_val<=i_temp[31:0];
			end
			if(q_temp[32]) begin
				if (q_temp[31]) q_shifted_val <= q_temp[31:0];
				else 			q_shifted_val <= 32'h_80000000;
			end
			else begin
				if (q_temp[31]) q_shifted_val<=32'h_7FFFFFFF;
				else 			q_shifted_val<=q_temp[31:0];
			end
		end
	end



endmodule // Frequency_Shifter