module Arbiter (
	input 				M100CLK,
	input 				reset,

	input [15:0]        data_in,
	input [31:0]		doppler_shift,
	input 				doppler_flag,

	output [15:0]		i,
	output [15:0]       q,
	output [15:0] 		shifted_output
);
	reg 				local_reset;
	reg 				state;
	reg 				output_flag;

	reg 				output_ready;
	// reg [15:0] 			temp_sum;

	reg [15:0]			i_temp;
	reg [15:0]			q_temp;
	reg [15:0]			i_ready;
	reg [15:0]			q_ready;

	//Frequency Shifter Stuff


   reg [15:0] q_shifted_val; // signed.
   reg [15:0] i_shifted_val; // signed.

   Frequency_Shifter my_Frequency_Shifter (M100CLK,reset,doppler_shift,i_ready,q_ready,q_shifted_val,i_shited_val);


	//If in state 0 q-data is coming in and we must wait to ouput.
	//If in state 1 i-data is coming in and we output.

	always @ (posedge M100CLK) begin
		local_reset <= reset;
		if (local_reset) begin
			shifted_output  	<=	0;

			// ready	<=	0;
		end 
		else begin
			if(output_flag)begin
				i <= {~i_shifted_val[15],i_shifted_val[14:0]};
				q <= {~q_shifted_val[15],q_shifted_val[14:0]};

				shifted_output  <=  q_shifted_val + i_shifted_val;
				output_flag 	<=	0;

			end
			if (output_ready) begin
				// ready 			<=	1;
				i_ready 		<= 	i_temp;
				q_ready 		<= 	q_temp;
				output_ready  	<=	0;
				if(doppler_flag) output_flag 	<=	1;
				else begin
					shifted_output <= i_temp +q_temp;
				end
			end

			if (state == 0)begin
				q_temp 			<=  data_in;
				state 			<=	1;
			end
			else begin 
				i_temp 			<=  data_in;
				output_ready 	<=  1;
				state 			<=	0;
				// ready 			<=  0;
			end

		end
	end



endmodule // Arbiter